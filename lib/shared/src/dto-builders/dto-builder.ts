import { Id } from '../utils';

export abstract class DtoBuilder<DtoType extends object> {
  private dto: Partial<DtoType> = {};

  protected abstract getRequiredKeysMap(): Record<keyof DtoType, boolean>;

  protected constructor() {}

  protected withProperty<Property extends keyof DtoType>(
    property: Property,
    value: DtoType[Property]
  ): this {
    this.dto[property] = value;

    return this;
  }

  build(): DtoType {
    for (const [dtoKey, isRequired] of Object.entries(
      this.getRequiredKeysMap()
    )) {
      if (isRequired && !this.dto[dtoKey as keyof DtoType])
        throw new Error(`Missing "${dtoKey}" property and it is required!`);
    }

    return this.dto as DtoType;
  }

  autoGeneratedId<IdType extends string>(prefix: string): IdType {
    return Id<IdType>(`${prefix}-${Date.now()}`);
  }
}
