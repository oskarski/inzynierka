import { DtoBuilder } from './dto-builder';
import {
  IngredientId,
  IRecipeDto,
  IRecipeIngredientDto,
  IRecipeListItemDto,
  RecipeCategoryId,
  RecipeId,
  RecipeState,
} from '../types';
import { Formulator } from '../utils';

export class RecipeListItemDtoBuilder extends DtoBuilder<IRecipeListItemDto> {
  protected getRequiredKeysMap(): Record<keyof IRecipeListItemDto, boolean> {
    return {
      id: true,
      name: true,
      description: true,
      preparationTime: true,
      portions: true,
      categoryIds: true,
      state: true,
      ingredientsCoverage: false,
    };
  }

  static prefilled(): RecipeListItemDtoBuilder {
    return new RecipeListItemDtoBuilder()
      .havingId('autogenerated')
      .named('Pizza margarita')
      .described('Królowa gatunku, czyli margherita!')
      .havingPreparationTime(45 * 60)
      .havingPortions(4)
      .withoutCategories()
      .published();
  }

  havingId(id: RecipeId | 'autogenerated'): this {
    return this.withProperty(
      'id',
      id === 'autogenerated' ? this.autoGeneratedId('recipe-category-') : id
    );
  }

  named(name: string): this {
    return this.withProperty('name', name);
  }

  described(description: string): this {
    return this.withProperty('description', description);
  }

  havingPreparationTime(preparationTime: number): this {
    return this.withProperty('preparationTime', preparationTime);
  }

  havingPortions(portions: number): this {
    return this.withProperty('portions', portions);
  }

  withoutCategories(): this {
    return this.withProperty('categoryIds', []);
  }

  havingCategories(
    categoryId: RecipeCategoryId,
    ...categoryIds: RecipeCategoryId[]
  ): this {
    return this.withProperty('categoryIds', [categoryId, ...categoryIds]);
  }

  draft(): this {
    return this.withProperty('state', RecipeState.draft);
  }

  published(): this {
    return this.withProperty('state', RecipeState.published);
  }
}

export class RecipeIngredientDtoBuilder extends DtoBuilder<IRecipeIngredientDto> {
  protected getRequiredKeysMap(): Record<keyof IRecipeIngredientDto, boolean> {
    return {
      id: true,
      name: true,
      quantity: true,
      unit: true,
    };
  }

  static prefilled(): RecipeIngredientDtoBuilder {
    return new RecipeIngredientDtoBuilder()
      .havingId('autogenerated')
      .named('Cebula')
      .pieces(1);
  }

  havingId(id: IngredientId | 'autogenerated'): this {
    return this.withProperty(
      'id',
      id === 'autogenerated' ? this.autoGeneratedId('recipe-ingredient-') : id
    );
  }

  named(name: string): this {
    return this.withProperty('name', name);
  }

  private withQuantity(quantity: number): this {
    return this.withProperty('quantity', quantity);
  }

  private withUnit(unit: string): this {
    return this.withProperty('unit', unit);
  }

  pieces(quantity: number): this {
    return this.withUnit('szt.').withQuantity(quantity);
  }

  g(quantity: number): this {
    return this.withUnit('g').withQuantity(quantity);
  }
}

export class RecipeDtoBuilder extends DtoBuilder<IRecipeDto> {
  protected getRequiredKeysMap(): Record<keyof IRecipeDto, boolean> {
    return {
      id: true,
      name: true,
      description: true,
      preparationTime: true,
      portions: true,
      categoryIds: true,
      instructions: true,
      ingredients: true,
    };
  }

  static prefilled(): RecipeDtoBuilder {
    return new RecipeDtoBuilder()
      .havingId('autogenerated')
      .named('Pizza margarita')
      .described('Królowa gatunku, czyli margherita!')
      .havingPreparationTime(45 * 60)
      .havingPortions(4)
      .withoutCategories()
      .withInstructions('Weź telefon', 'Zamów pizze', 'Smacznego!')
      .withIngredients((ingredient) => ingredient.named('Cola').pieces(1));
  }

  havingId(id: RecipeId | 'autogenerated'): this {
    return this.withProperty(
      'id',
      id === 'autogenerated' ? this.autoGeneratedId('recipe-') : id
    );
  }

  named(name: string): this {
    return this.withProperty('name', name);
  }

  described(description: string): this {
    return this.withProperty('description', description);
  }

  havingPreparationTime(preparationTime: number): this {
    return this.withProperty('preparationTime', preparationTime);
  }

  havingPortions(portions: number): this {
    return this.withProperty('portions', portions);
  }

  withoutCategories(): this {
    return this.withProperty('categoryIds', []);
  }

  havingCategories(
    categoryId: RecipeCategoryId,
    ...categoryIds: RecipeCategoryId[]
  ): this {
    return this.withProperty('categoryIds', [categoryId, ...categoryIds]);
  }

  withIngredients(
    formulator: Formulator<RecipeIngredientDtoBuilder>,
    ...formulators: Formulator<RecipeIngredientDtoBuilder>[]
  ): this {
    return this.withProperty(
      'ingredients',
      [formulator, ...formulators].map((formulator) =>
        formulator(RecipeIngredientDtoBuilder.prefilled()).build()
      )
    );
  }

  withInstructions(instruction: string, ...instructions: string[]): this {
    return this.withProperty(
      'instructions',
      [instruction, ...instructions].map((step) => ({ step }))
    );
  }
}
