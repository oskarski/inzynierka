import { DtoBuilder } from './dto-builder';
import {
  IRecipeDto,
  IRecipeListItemDto,
  RecipeCategoryId,
  RecipeId,
} from '../types';

export class RecipeListItemDtoBuilder extends DtoBuilder<IRecipeListItemDto> {
  protected getRequiredKeysMap(): Record<keyof IRecipeListItemDto, boolean> {
    return {
      id: true,
      name: true,
      description: true,
      preparationTime: true,
      portions: true,
      categoryIds: true,
    };
  }

  static prefilled(): RecipeListItemDtoBuilder {
    return new RecipeListItemDtoBuilder()
      .havingId('autogenerated')
      .named('Pizza margarita')
      .described('Królowa gatunku, czyli margherita!')
      .havingPreparationTime(45 * 60)
      .havingPortions(4)
      .withoutCategories();
  }

  havingId(id: RecipeId | 'autogenerated'): this {
    return this.withProperty(
      'id',
      id === 'autogenerated' ? this.autoGeneratedId('recipe-category-') : id
    );
  }

  named(name: string): this {
    return this.withProperty('name', name);
  }

  described(description: string): this {
    return this.withProperty('description', description);
  }

  havingPreparationTime(preparationTime: number): this {
    return this.withProperty('preparationTime', preparationTime);
  }

  havingPortions(portions: number): this {
    return this.withProperty('portions', portions);
  }

  withoutCategories(): this {
    return this.withProperty('categoryIds', []);
  }

  havingCategories(
    categoryId: RecipeCategoryId,
    ...categoryIds: RecipeCategoryId[]
  ): this {
    return this.withProperty('categoryIds', [categoryId, ...categoryIds]);
  }
}

export class RecipeDtoBuilder extends DtoBuilder<IRecipeDto> {
  protected getRequiredKeysMap(): Record<keyof IRecipeDto, boolean> {
    return {
      id: true,
      name: true,
      description: true,
      preparationTime: true,
      portions: true,
      categoryIds: true,
      instructions: true,
      ingredients: true,
    };
  }

  static prefilled(): RecipeDtoBuilder {
    return (
      new RecipeDtoBuilder()
        .havingId('autogenerated')
        .named('Pizza margarita')
        .described('Królowa gatunku, czyli margherita!')
        .havingPreparationTime(45 * 60)
        .havingPortions(4)
        .withoutCategories()
        .withInstructions('Weź telefon', 'Zamów pizze', 'Smacznego!')
        // TODO extract separate method
        .withProperty('ingredients', [])
    );
  }

  havingId(id: RecipeId | 'autogenerated'): this {
    return this.withProperty(
      'id',
      id === 'autogenerated' ? this.autoGeneratedId('recipe-category-') : id
    );
  }

  named(name: string): this {
    return this.withProperty('name', name);
  }

  described(description: string): this {
    return this.withProperty('description', description);
  }

  havingPreparationTime(preparationTime: number): this {
    return this.withProperty('preparationTime', preparationTime);
  }

  havingPortions(portions: number): this {
    return this.withProperty('portions', portions);
  }

  withoutCategories(): this {
    return this.withProperty('categoryIds', []);
  }

  havingCategories(
    categoryId: RecipeCategoryId,
    ...categoryIds: RecipeCategoryId[]
  ): this {
    return this.withProperty('categoryIds', [categoryId, ...categoryIds]);
  }

  withInstructions(instruction: string, ...instructions: string[]): this {
    return this.withProperty(
      'instructions',
      [instruction, ...instructions].map((step) => ({ step }))
    );
  }
}
